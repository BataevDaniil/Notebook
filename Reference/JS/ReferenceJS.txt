<script> код на js </script>.##
<script src="Путь к JS файлу или сылка из интернета">
Внутреняя часть игнорируетя </script>.##
<script src='' async> </script> Не останавливается на недогруженом скрипте
при обработке страницы, становится синхронным.##
<script src='' defer> </script> Если написано несколько скриптов подряд
то если загрузится второй быстрей первого то будет все равно исполняться первый
после загрузки.##

===============================================================================

Вызов каждой команды отделяется ; ##
Коментарии однострочные //Текст ##
Коментарии многострочные /*Текст*/ ##

===============================================================================
"use strict"; включает новый стандарт ОСТОРОЖНО.##
===============================================================================

var название_переменной объявление переменной.##
РЕГИСТР БУКВ имеет значение.##
Имя может состоять из: букв, цифр, символов $ и _
Первый символ не должен быть цифрой.##
Констант нет.##
Одинарные и двойные кавычки эквивалентны.##
Целые и вещественые числа это одно и тоже.##
Специальное значение для переменной null означает ничего или неизсвестно.##
Специальное значенее для переменной undefined
значит переменной неприсвоено никакого значения.##
Infinity бесконечность.##
-Infinity минус бесконечность.##
Значение NaN используется для обозначения математической ошибки.##
Значение NaN – единственное, которое не равно ничему, включая себя.##
Любая операция с NaN возвращает NaN.##
isNaN(n) преобразует аргумент к числу и возвращает true,
если получилось NaN, и false – для любого другого значения.##
isFinite(n) преобразует аргумент к числу и возвращает true,
если это не NaN/Infinity/-Infinity ##
Функция parseInt и ее аналог parseFloat преобразуют строку символ за символом,
пока это возможно.##
Функция parseInt также позволяет указать систему счисления parseInt('FF', 16)##

-------------------------------------------------------------------------------
Оператор typeof возвращает тип аргумента.##
Синтаксис оператора: typeof x.##
Синтаксис функции: typeof(x).##
Результатом typeof является строка, содержащая тип.##

-------------------------------------------------------------------------------
String(value) переводит value в строковой тип.##
Или альтернативный вариант можно сложить строку и value с помощью знака +
и получить сложение строк.##

-------------------------------------------------------------------------------
Number(value) переводит value в численный тип.##
Или можно написать перед value знак +.##

undefined         NaN
null              0
true / false      1 / 0
Строка            Пробельные символы по краям обрезаются. Далее, если остаётся
пустая строка то 0, иначе из непустой строки "считывается" число,
при ошибке результат NaN.##

-------------------------------------------------------------------------------
Boolean(value) переводит value в логический тип.##
Или можно перед value поставить знаки !!.##

undefined, null   false
Числа             Все true, кроме 0, NaN -- false.
Строки            Все true, кроме пустой строки "" -- false
Объекты           Всегда true

===============================================================================

ОПЕРАНД то к чему пременяется оператор.##
унарная операция это операция над 1 элементом.##
бинарная операция это опирация над 2 элементами.##
тренарная операция это операция над 3 элементами.##

===============================================================================

При сравнении разных типов они приводяться к числовому типу.##
Значения null и undefined равны == друг другу и не равны
чему бы то ни было ещё.##
При преобразовании в число null становится 0, undefined становится NaN.##
Число 0, пустая строка "", null и undefined, а также NaN являются false,
oстальные значения – true.##

=== равноли по значению и по типу.##
|| логиечское (или) при первой истине прерывается и возращает значение
аргумента того же типа, если ложно проверяется до последнего аргумента
и возращает его.##
&& логическое (и) при первой лжи прерывает и возращет значение аргумента того
же типа, если истина проверяет дальше до поледнего аргумента и возращает его.##
!приводит аргумент к логическому типу и возвращает противоположное значение.##
Сравнение разных типов значить что аргументы приводятся к типу целочисленому.##

===============================================================================

i++ инкремент.##
i-- декремент.##
i++ постфиксная сначала возращает значение потом увеличивает.##
++i префиксная увеличивает значение и возращает.##

===============================================================================

МОДАЛЬНОЕ ОКНО при открытии которого пользователь не может что то делать
на сайте пока не закроет окно.##

-------------------------------------------------------------------------------
alert("Текст") модальное окно которое показывает текст
и имеет одну кнопку ОК.##

-------------------------------------------------------------------------------
prompt(title, default) модальное окно с заголовком title,
полем для ввода текста, заполненным строкой по умолчанию default
и кнопками OK/CANCEL.##
Вызов prompt возвращает то, что ввёл посетитель – строку
или специальное значение null, если ввод отменён.##

-------------------------------------------------------------------------------
confirm(question) модальное окно с вопросом question
с двумя кнопками: OK и CANCEL.##
Возврощает true при нажатии OK и false – при CANCEL.##

===============================================================================

if(условие){Блок кода}
else{}

-------------------------------------------------------------------------------
условие ? значение1 : значение2

Проверяется условие, затем если оно верно – возвращается значение1,
если неверно – значение2.##

-------------------------------------------------------------------------------
switch(x) {
  case 'value1':  // if (x === 'value1')
    ...
    [break]

  case 'value2':  // if (x === 'value2')
    ...
    [break]

  default:
    ...
    [break]
}

Если break нет, то выполнение пойдёт ниже по следующим case,
при этом остальные проверки игнорируются.##
Оператор switch предполагает строгое равенство === ##

-------------------------------------------------------------------------------
Один проход цикла называется ИНТЕРАЦИЯ.##

-------------------------------------------------------------------------------
while (условие)
{тело цикла}

Тело цикла будет исполняться пока условие истиино.##

-------------------------------------------------------------------------------
do {тело цикла}
while (условие);
Тело цикла выполняется один раз и дальше пока условие истино.##

-------------------------------------------------------------------------------
for (начало; условие; шаг)
{тело цикла}

Выполняется пока истино.##
Шаг выполняется после тела на каждой итерации, но перед проверкой условия.##

-------------------------------------------------------------------------------
ВАЖНООООООО!!!!!!!!!
Блоки if/else, switch, for, while, do..while не влияют
на область видимости переменных.##

-------------------------------------------------------------------------------
break выходит из ближайшего цикла.##
continue возращает в начало цикла.##

-------------------------------------------------------------------------------
Метка имеет вид ИМЯ: то какойму циклу переходит, break или continue ИМЯ
то привстречи переходит к другой метке.##
Нельзя использовать break/continue справа от оператора „?“.##

===============================================================================

Функции в JavaScript являются значениями.##
Их можно присваивать, передавать, создавать в любом месте кода.##
Функция в JavaScript является объектом, поэтому можно присваивать свойства
прямо к ней. Свойство у функции – доступно отовсюду и всегда.##
имя_функции.имя_свойства = значение; создает свойста.##
Замыкание – это функция вместе со всеми внешними переменными, которые ей
доступны.##

-------------------------------------------------------------------------------
params Параметры функции через запятую в виде строки.##
ЛЮБАЯ ФУНКЦИЯ МОЖЕТ БЫТЬ ВЫЗВАНА С ПРОИЗВОЛЬНЫМ КОЛИЧЕСТВОМ АРГУМЕНТОВ.##
В JavaScript нет «перегрузки» функций.##
Если написать две функции с одинаковыми названиями, то вторая преопределит
первую.##

Доступ к аргументам функции можно получить с помощью «псевдо-массив» arguments.
Он содержит список аргументов по номерам: arguments[0], arguments[1]…,
а также свойство length. arguments – это не массив Array, а объект.##
Аргументы отделены от локальных переменных.##

Если функция вызвана с меньшим количеством аргументов, чем указано,
то отсутствующие аргументы считаются равными undefined.##
Аргументы могут иметь значения по-умолчанию. Задются они либо когда они
заведомо не false с помощью || ,либо с помощью условия.##
В качестве параметра можно передавать объект в котором будут заданы нужные
аргументы а остальные в функции будут заданы по умолчанию.##

-------------------------------------------------------------------------------
Функция называется в спецификации языка Function Declaration.##

function название(параметры)
{
  тело функции
  return возращает значение;
}

-------------------------------------------------------------------------------
Функция называется в спецификации языка Function Expression.##

var f = function(параметры) {
  // тело функции
};

-------------------------------------------------------------------------------
var name = new Function(params, code);
Cвойство [[Scope]] ссылается не на текущий LexicalEnvironment, а на window.
-------------------------------------------------------------------------------
var f = function sayHi(...) { /* тело функции */ };

Имя sayHi будет доступно только внутри функции.##
Это имя предназначено для надёжного рекурсивного вызова функции,
даже если она записана в другую переменную.##

-------------------------------------------------------------------------------
;(function(){}()) само вызывающаюся функция.##

-------------------------------------------------------------------------------
Основное отличие между ними: функции, объявленные как Function Declaration,
создаются интерпретатором до выполнения кода.##
Function Declaration при use strict
видны только внутри блока, в котором объявлены.##

-------------------------------------------------------------------------------
У функции может быть параметр функция.##
Функциональное выражение, которое не записывается в переменную,
называют АНОНИМНОЙ функцией.##

-------------------------------------------------------------------------------
return может находиться в любом месте функции.##
Когда до неё доходит управление – функция завершается
и значение передается обратно.##
Вызовов return может быть и несколько.##
return может также использоваться без значения и возращает undefined.##
Функция без return считается возвращающей undefined.##

-------------------------------------------------------------------------------
Если параметр не передан при вызове – он считается равным undefined.##
параметры по умолчанию:
if (text === undefined) {
    text = 'текст не передан';
  }
text = text || 'текст не передан';

===============================================================================

js понимает 16-ричные числа.##

-------------------------------------------------------------------------------
3en n число нулей справа от 3  3e2 = 300
3e-n n число знаков почле запятой   3e-2 = 0.03

-------------------------------------------------------------------------------
Math.floor Округляет вниз.##
Math.ceil Округляет вверх.##
Math.round Округляет до ближайшего целого.##
num.toFixed(precision) округляет число num до точности precision
и до ближайшего значения и возвращает результат в виде строки.##

-------------------------------------------------------------------------------
Тригонометрия:
Math.acos(x) Возвращает арккосинус x (в радианах).##
Math.asin(x) Возвращает арксинус x (в радианах).##
Math.atan(x) Возвращает арктангенс x (в радианах).##
Math.atan2(y, x) Возвращает угол до точки (y, x).##
Math.sin(x) Вычисляет синус x (в радианах).##
Math.cos(x) Вычисляет косинус x (в радианах).##
Math.tan(x) Возвращает тангенс x (в радианах).##

-------------------------------------------------------------------------------
Math.sqrt(x) Возвращает квадратный корень из x.##
Math.log(x) Возвращает натуральный (по основанию e) логарифм x.##
Math.pow(x, exp) Возводит число в степень, возвращает x^exp,
например Math.pow(2,3) = 8. Работает в том числе с дробными и
отрицательными степенями, например: Math.pow(4, -1/2) = 0.5.##
Math.abs(x) Возвращает абсолютное значение числа.##
Math.exp(x) Возвращает ex, где e – основание натуральных логарифмов.##
Math.max(a, b, c...) Возвращает наибольший из списка аргументов.##
Math.min(a, b, c...) Возвращает наименьший из списка аргументов.##
Math.random() Возвращает псевдо-случайное число в интервале [0,1)
то есть между 0(включительно) и 1(не включая).
Генератор случайных чисел инициализуется текущим временем.##

-------------------------------------------------------------------------------
toLocaleString() alert( number.toLocaleString() );
// 123 456 789 Красивый вывод числа.##

===============================================================================

Для создания строк можно использовать как двойные так и одинарные кавычки.##
\b      Backspace
\f      Form feed
\n      New line
\r      Carriage return
\t      Tab
\uNNNN  Символ в кодировке Юникод с шестнадцатеричным кодом `NNNN`.
Например, `\u00A9` -- юникодное представление символа копирайт ©.##

-------------------------------------------------------------------------------
str.length длина строки.##
str.charAt(i) или str[i] вернет i символ.##
toLowerCase() и toUpperCase() меняют регистр строки на нижний/верхний.##
Для поиска подстроки indexOf(подстрока[, начальная_позиция])
возвращает позицию, на которой находится подстрока или -1 учитывает регистр.##
slice(start [, end]) возвращает подстроку с позиции start до но не включая end.
Принимает отрицательный аргумент берет элементы щитая с конца.##
Все строки имеют внутреннюю кодировку Юникод.##
String.fromCharCode(code) Возвращает символ по коду code.##
str.charCodeAt(pos) Возвращает код символа на позиции pos.##
trim обрезает пробелы с начала и конца строки.##

===============================================================================

ОБЪЕКТЫ КАК АССОЦИАТИВНЫЕ МАССИВЫ.##
Ассоциативный массив – структура данных, в которой можно хранить любые данные
в формате ключ-значение.##
Если свойство не существует, то вернется специальное значение undefined.##
Порядок перебора соответствует порядку объявления для нечисловых ключей,
а числовые – сортируются.##
В переменной, которой присвоен объект, хранится не сам объект,
а «адрес его места в памяти», иными словами – «ссылка» на него.##
При копировании переменной с объектом – копируется эта ссылка,
а объект по-прежнему остается в единственном экземпляре.##
Если переменная-объект скопирована или передана в функцию,
то копируется именно эта ссылка, а объект остаётся один в памяти.##

-------------------------------------------------------------------------------
Объект можно заполнить значениями при создании, указав их в фигурных скобках:
{ ключ1: значение1, ключ2: значение2, ... }.
Такой синтаксис называется литеральным (англ. literal).##

-------------------------------------------------------------------------------
Проверить есть ли в объекте свойство с определенным ключом используют "in".##
Его синтаксис: "ключ_объекста" in объект, причем имя свойства – в виде строки
как правило, работает и просто сравнение if (obj.prop !== undefined)

for (var key in obj) {
  /* ... делать что-то с obj[key] ... */
}

Последовательно переберёт свойства объекта obj, имя каждого свойства
будет записано в key и вызвано тело цикла.##

-------------------------------------------------------------------------------
название_объекта = new Object(); пустой объект.##
название_объекта = {}; пустой объект.##

-------------------------------------------------------------------------------
название_объекта.ключ_значения = значение;
В название_объекта добовляется ключ_значения которое имеет значение.##
название_объекта.["ключ_значения"] = значение;
В название_объекта добовляется ключ_значения которое имеет значение.##

-------------------------------------------------------------------------------
название_объекта.ключ_значения получения заначения  ключ_значения.##
название_объекта.["ключ_значения"] получения заначения  ключ_значения.##

-------------------------------------------------------------------------------
delete название_объекта.ключ_значения удаления ключа со занчениием.##
delete название_объекта.["ключ_значения"] удаления ключа со занчениием.##

===============================================================================
МАССИВЫ С ЧИСЛОВЫМИ ИНДЕКСАМИ.##
В массиве может храниться любое число элементов любого типа.##

-------------------------------------------------------------------------------
var название_массива = []; создает пустой массив.##
var arr = new Array(знчения массива через запятую); ##
Чтобы получить нужный элемент из массива указывается его номер
в квадратных скобках название_массива[номер_объекта_от_нуля] ##

-------------------------------------------------------------------------------
length длина массива. Если её уменьшить вручную, то массив укоротится
arr.length = 2; // укоротить до 2 элементов. Если length больше
реального количества элементов, то отсутствующие элементы равны undefined.##
pop() Удаляет последний элемент из массива и возвращает его.##
push(значение) Добавляет элемент в конец массива,
могут добавлять сразу по несколько элементов.##
shift() Удаляет из массива первый элемент и возвращает его.##
unshift(значение) Добавляет элемент в начало массива,
могут добавлять сразу по несколько элементов.##

-------------------------------------------------------------------------------
split(s, n) позволяет превратить строку в массив, разбив ее по разделителю s.
Второй необязательный аргумент – n кол-во элементов которые надо считать.##
join(str) склеивает массив в строку, используя str как разделитель.##
delete удаляет пару «ключ-значение». Обычно же при удалении из массива мы хотим
чтобы оставшиеся элементы сдвинулись и заполнили образовавшийся промежуток.##
splice(index[, deleteCount, elem1, ..., elemN]); Удалить deleteCount элементов,
начиная с номера index, а затем вставить elem1, ..., elemN на их место.
Возвращает массив из удалённых элементов.##
slice([begin, end]) копирует участок массива от begin до end, не включая end.
Исходный массив при этом не меняется. Отрицательные индексы
отсчитываются с конца.##
reverse() меняет порядок элементов в массиве на обратный.##
arr.concat(value1, value2, … valueN) создаёт новый массив, в который копируются
элементы из arr, а также value1, value2, ... valueN.
Если аргумент concat – массив, то concat добавляет элементы из него.##

-------------------------------------------------------------------------------
Двумерный массив:
var matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];
alert( matrix[1][1] )

===============================================================================

Преобразование объектов к примитивам:
В логическом контексте объект – всегда true.##
Если вывести просто объект то получим  [object Object]. Если в объекте
встретится метод toString то что метод вернет и будет выведено как объект.##
Если в объекте всетриться метод valueOf то что метод вернет и будет ввыведено
как объект.##

===============================================================================
DOM
В мире DOM в качестве значения, обозначающего «нет такого элемента» или
«узел не найден», используется не undefined, а null.##

Псевдо-массив childNodes хранит все дочерние элементы, включая текстовые.##

Дочерние элементы (или дети) – элементы, которые лежат непосредственно внутри
данного. Например, внутри <HTML> обычно лежат <HEAD> и <BODY>.##

Потомки – все элементы, которые лежат внутри данного, вместе с их детьми,
детьми их детей и так далее. То есть, всё поддерево DOM.##

Свойства firstChild и lastChild обеспечивают быстрый доступ к первому и
последнему элементу.##

Доступ к элементам слева и справа данного можно получить по ссылкам
previousSibling / nextSibling.##

Родитель доступен через parentNode. Если долго идти от одного элемента
к другому, то рано или поздно дойдёшь до корня DOM,
то есть до document.documentElement, а затем и document.##

children – только дочерние узлы-элементы, то есть соответствующие тегам.##
firstElementChild, lastElementChild – соответственно, первый и последний
дети-элементы.##
previousElementSibling, nextElementSibling – соседи-элементы.##
parentElement – родитель-элемент.##

TABLE
  table.rows – коллекция строк TR таблицы.
  table.caption/tHead/tFoot – ссылки на элементы таблицы CAPTION, THEAD, TFOOT.
  table.tBodies – коллекция элементов таблицы TBODY, по спецификации их может быть несколько.
  THEAD/TFOOT/TBODY
  tbody.rows – коллекция строк TR секции.
TR
  tr.cells – коллекция ячеек TD/TH
  tr.sectionRowIndex – номер строки в текущей секции THEAD/TBODY
  tr.rowIndex – номер строки в таблице
TD/TH
  td.cellIndex – номер ячейки в строке

Более правильной и общепринятой практикой является доступ к элементу вызовом document.getElementById("идентификатор").##

Метод                   Ищет по...    Ищет внутри элемента?
getElementById          id            -
getElementsByName       name          -
getElementsByTagName    тег или '*'   ✔
getElementsByClassName  классу        ✔
querySelector           CSS-селектор  ✔
querySelectorAll        CSS-селектор  ✔

Вызов elem.querySelectorAll(css) возвращает все элементы внутри elem,
удовлетворяющие CSS-селектору css.
Пример:  document.querySelectorAll('ul > li:last-child');

Вызов elem.querySelector(css) возвращает не все, а только первый элемент,
соответствующий CSS-селектору css.##

Метод elem.matches(css) проверяет, удовлетворяет ли elem селектору css.
Он возвращает true либо false.##

nodeType тип узла. Самые популярные типы: "1" – для элементов и "3" – для
текстовых узлов. Только для чтения.##

nodeName/tagName название тега заглавными буквами. nodeName имеет специальные
значения для узлов-неэлементов. Только для чтения.
Свойство nodeName определено для любых узлов Node, для элементов оно равно
tagName, а для не-элементов обычно содержит строку с типом узла.##

innerHTML позволяет получить HTML-содержимое элемента в виде строки, можно и
читать и писать.##

outerHTML полный HTML узла-элемента. При записи в elem.outerHTML переменная
elem сохраняет старый узел.##

Тексты или комментарии, доступны на чтение и запись через свойство data.##

textContent содержит только текст внутри элемента, за вычетом всех тегов.
Можно использовать для защиты от вставки произвольного HTML кода.##

Свойство и атрибут hidden скрыть элемент можно с помощью установки свойства
hidden в true или с помощью атрибута##

elem.hasAttribute(name) – проверяет наличие атрибута
elem.getAttribute(name) – получает значение атрибута
elem.setAttribute(name, value) – устанавливает атрибут
elem.removeAttribute(name) – удаляет атрибут

все атрибуты элемента можно получить с помощью свойства elem.attributes,
которое содержит псевдо-массив объектов типа Attr.##

Атрибуту "class" соответствует свойство className. Свойство classList это
псевдо массив с набором классов.##

elem.classList.contains("class") – возвращает true/false, в зависимости от того,
есть ли у элемента класс class.
elem.classList.add/remove("class") – добавляет/удаляет класс class
elem.classList.toggle("class") – если класса class нет, добавляет его,
если есть – удаляет.

document.createElement(tag) – создает элемент
document.createTextNode(value) – создает текстовый узел
elem.cloneNode(deep) – клонирует элемент, если deep == true, то со всеми
потомками, если false – без потомков.

parent.appendChild(elem) добавляет elem в конец дочерних элементов parentElem.
parent.insertBefore(elem, nextSibling) вставляет elem в коллекцию детей
parentElem, перед элементом nextSibling.##
parent.removeChild(elem) удаляет elem из списка детей parentElem.
parent.replaceChild(newElem, elem) Среди детей parentElem удаляет elem и
вставляет на его место newElem.##
Все эти методы возвращают elem.##

node.append(...nodes) – вставляет nodes в конец node,
node.prepend(...nodes) – вставляет nodes в начало node,
node.after(...nodes) – вставляет nodes после узла node,
node.before(...nodes) – вставляет nodes перед узлом node,
node.replaceWith(...nodes) – вставляет nodes вместо node.

elem.insertAdjacentHTML(where, html); html Строка HTML, которую нужно вставить
where :Куда по отношению к elem вставлять строку. Всего четыре варианта:
1. `beforeBegin` -- перед `elem`.
2. `afterBegin` -- внутрь `elem`, в самое начало.
3. `beforeEnd` -- внутрь `elem`, в конец.
4. `afterEnd` -- после `elem`.

DocumentFragment похож на узел, служит временным контейниром узлов, когда
добовляешь его в DOM он растворяется.##

Свойство currentStyle(IE8-) и метод getComputedStyle (IE9+, стандарт) позволяют
получить реальное, применённое сейчас к элементу свойство стиля с учётом
CSS-каскада и браузерных стилей по умолчанию.

element.style.width="100px" свойстов style добовляет стили
Чтобы сбросить поставленный стиль, присваивают в style пустую строку
Стиль в style находится в формате браузера, а не в том, в котором его присвоили.
иСвойство style содержит лишь тот стиль, который указан в атрибуте элемента,
без учёта каскада CSS.спользуется не elem.style.float, а elem.style.cssFloat

Свойство elem.style.cssText позволяет поставить стиль целиком как в файле CSS
в виде строки.
При установке style.cssText все предыдущие свойства style удаляются.

Для того, чтобы получить текущее используемое значение свойства, используется
метод window.getComputedStyle
getComputedStyle(element[, pseudo])
element Элемент, значения для которого нужно получить
pseudo Указывается, если нужен стиль псевдо-элемента, например "::before".
Пустая строка или отсутствие аргумента означают сам элемент.


element.addEventListener(event, handler[, phase]);
event Имя события, например click
handler Ссылка на функцию, которую надо поставить обработчиком.
phase Необязательный аргумент, «фаза», на которой обработчик должен сработать.
Удаление обработчика осуществляется вызовом removeEventListener:
// передать те же аргументы, что были у addEventListener
element.removeEventListener(event, handler[, phase]);

