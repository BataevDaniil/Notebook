//////Игнорирование файлов//////
К шаблонам в файле .gitignore применяются следующие правила:

Пустые строки, а также строки, начинающиеся с #, игнорируются.
Можно использовать стандартные glob шаблоны.
Можно заканчивать шаблон символом слэша (/) для указания каталога.
Можно инвертировать шаблон, использовав восклицательный знак (!) в качестве первого символа.
Glob-шаблоны представляют собой упрощённые регулярные выражения используемые командными интерпретаторами.
Символ * соответствует 0 или более символам; последовательность [abc] — любому символу из указанных в скобках (в данном примере a, b или c);
знак вопроса (?) соответствует одному символу;
[0-9] соответствует любому символу из интервала (в данном случае от 0 до 9).


git diff показывает вам непосредственно добавленные и удалённые строки
git diff --staged что вы проиндексировали и что войдёт в следующий коммит, вы можете выполнить


git commit -m "text"
любые файлы, созданные или изменённые вами, и для которых вы не выполнили git add после момента редактирования — не войдут в этот коммит.
Они останутся изменёнными файлами на вашем диске


Для того чтобы удалить файл из Git'а, вам необходимо удалить его из отслеживаемых файлов
rm имя_файла удаляет файл а после ...
git rm имя_файла или каталога     удаляет его из следующего комита если вы до этого его проиндексивровали то надо добавить парметр -f
git rm --cached имя_файла или каталога   удаляет  проиндексированные файлы


git mv file_from file_to меняет имя файла


git log выводит список коммитов созданных в данном репозитории в обратном хронологическом порядке.
-p							Для каждого коммита показывать дельту внесённых им изменений.
--word-diff			Показывать изменения на уровне слов.
--stat					Для каждого коммита дополнительно выводить статистику по изменённым файлам.
--shortstat			Показывать только строку changed/insertions/deletions от вывода с опцией --stat.
--name-only			Показывать список изменённых файлов после информации о коммите.
--name-status		Выводить список изменённых файлов вместе с информацией о добавлении/изменении/удалении.
--abbrev-commit	Выводить только первые несколько символов контрольной суммы SHA-1 вместо всех 40.
--relative-date	Выводить дату в относительном формате (например, "2 weeks ago") вместо полной даты.
--graph       	Показывать ASCII-граф истории ветвлений и слияний рядом с выводом лога.
--pretty	 			Отображать коммиты в альтернативном формате. Возможные параметры: oneline, short, full, fuller и format (где вы можете указать свой собственный формат).

--pretty=...   Он позволяет изменить формат вывода лога.
format, который позволяет вам полностью создать собственный формат вывода лога
%H	Хеш коммита
%h	Сокращённый хеш коммита
%T	Хеш дерева
%t	Сокращённый хеш дерева
%P	Хеши родительских коммитов
%p	Сокращённые хеши родительских коммитов
%an	Имя автора
%ae	Электронная почта автора
%ad	Дата автора (формат соответствует параметру --date=)
%ar	Дата автора, относительная (пр. "2 мес. назад")
%cn	Имя коммитера
%ce	Электронная почта коммитера
%cd	Дата коммитера
%cr	Дата коммитера, относительная
%s	Комментарий
ПРИМЕР:
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 11 months ago : changed the version number
085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code
a11bef0 - Scott Chacon, 11 months ago : first commit




-(n)								Показать последние n коммитов
--since, --after		Ограничить коммиты теми, которые сделаны после указанной даты.
--until, --before		Ограничить коммиты теми, которые сделаны до указанной даты.
--author						Показать только те коммиты, автор которых соответствует указанной строке.
--committer					Показать только те коммиты, коммитер которых соответствует указанной строке.

добавить новый удалённый Git-репозиторий под именем-сокращением, к которому будет проще обращаться, выполните git remote add [сокращение] [url]:

git fetch [имя удал. сервера]
Данная команда связывается с указанным удалённым проектом и забирает все те данные проекта, которых у вас ещё нет. После того как вы выполнили команду, у вас должны появиться ссылки на все ветки из этого удалённого проекта. Теперь эти ветки в любой момент могут быть просмотрены или слиты.

git tag
Данная команда перечисляет метки в алфавитном порядке; порядок их появления не имеет значения.
Для меток вы также можете осуществлять поиск по шаблону

Вы можете посмотреть данные метки вместе с коммитом, который был помечен, с помощью команды git show:
git push origin [имя метки]. чтобы отправить метки на сервер.

git checkout -- file откатывает сделаные изменения до последнего комита

git branch [имя] создает новую ветку
git branch показывает все ветки и на какой вы находитесь
git branch -v показывает все ветки и дополнительной информацией
git chackout [имя] переходит на указанную ветку
git marge [имя] сливает ветку на которой находитесь сейчас и ту которую указали
git margtool вы в ручную разрешаете конфликт двух веток при слиянии

git remote показывает подключенне репозитории
git remote remove <имя> удалить сылку на репозиторий
git remote -v показывает подключенне репозитории с дополнительной информаций
git remote add [имя] [URL] подключается к новому репозиторию и присваивает ему указоное имя

git push -u [имя подключенного репозитория] [ветка] загружает с указаной ветке на указаный репозитории.
Аргумент -u запонимает куда в следующий раз сохранять изменения.
git fetch добовляет в .git все то чего нет в ваших файлах
git pull сливает наши данные с новыми из рипозитория
